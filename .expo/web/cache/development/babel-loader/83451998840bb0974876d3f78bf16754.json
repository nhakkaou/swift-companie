{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/src/Tree.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactText from \"react-native-web/dist/exports/Text\";\nimport Svg, { Circle, G, Path, Text } from 'react-native-svg';\nimport { Options, styleSvg, fontAdapt } from \"./util\";\nimport _ from 'lodash';\n\nvar Tree = require('paths-js/tree');\n\nfunction children(x) {\n  if (x.collapsed) {\n    return [];\n  } else {\n    return x.children || [];\n  }\n}\n\nvar TreeChart = function (_Component) {\n  _inherits(TreeChart, _Component);\n\n  var _super = _createSuper(TreeChart);\n\n  function TreeChart() {\n    _classCallCheck(this, TreeChart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TreeChart, [{\n    key: \"render\",\n    value: function render() {\n      var noDataMsg = this.props.noDataMessage || 'No data available';\n      if (this.props.data === undefined) return React.createElement(ReactText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 48\n        }\n      }, noDataMsg);\n      var options = new Options(this.props);\n      var tree = Tree({\n        data: this.props.data,\n        children: children,\n        width: options.chartWidth,\n        height: options.chartHeight\n      });\n      var colors = styleSvg({}, options);\n\n      var curves = _.map(tree.curves, function (c, i) {\n        return React.createElement(Path, {\n          key: 'curves_' + i,\n          d: c.connector.path.print(),\n          fill: \"none\",\n          stroke: colors.stroke,\n          strokeOpacity: colors.strokeOpacity,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 14\n          }\n        });\n      });\n\n      var fillOpacityStyle = 1;\n      var textStyle = fontAdapt(options.label);\n      var r = options.r || 5;\n\n      var nodes = _.map(tree.nodes, function (n, index) {\n        var text;\n\n        if (children(n.item).length > 0) {\n          text = React.createElement(Text, {\n            fontFamily: textStyle.fontFamily,\n            fontSize: textStyle.fontSize,\n            fontWeight: textStyle.fontWeight,\n            fontStyle: textStyle.fontStyle,\n            x: -10,\n            y: -10,\n            textAnchor: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 16\n            }\n          }, n.item.name);\n        } else {\n          text = React.createElement(Text, {\n            fontFamily: textStyle.fontFamily,\n            fontSize: textStyle.fontSize,\n            fontWeight: textStyle.fontWeight,\n            fontStyle: textStyle.fontStyle,\n            x: 10,\n            y: -10,\n            textAnchor: \"start\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 16\n            }\n          }, n.item.name);\n        }\n\n        return React.createElement(G, {\n          key: 'tree_' + index,\n          x: n.point[0],\n          y: n.point[1],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }\n        }, React.createElement(Circle, _extends({\n          fillOpacity: fillOpacityStyle\n        }, colors, {\n          r: r,\n          cx: \"0\",\n          cy: \"0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 19\n          }\n        })), text);\n      });\n\n      return React.createElement(Svg, {\n        width: options.width,\n        height: options.height,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, React.createElement(G, {\n        x: options.margin.left,\n        y: options.margin.top,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }\n      }, curves, nodes));\n    }\n  }]);\n\n  return TreeChart;\n}(Component);\n\nTreeChart.defaultProps = {\n  options: {\n    margin: {\n      top: 20,\n      left: 50,\n      right: 80,\n      bottom: 20\n    },\n    width: 600,\n    height: 600,\n    fill: '#2980B9',\n    stroke: '#3E90F0',\n    r: 5,\n    animate: {\n      type: 'oneByOne',\n      duration: 200,\n      fillTransition: 3\n    },\n    label: {\n      fontFamily: 'Arial',\n      fontSize: 14,\n      bold: true,\n      fill: '#34495E'\n    }\n  }\n};\nexport { TreeChart as default };","map":{"version":3,"sources":["/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/src/Tree.js"],"names":["React","Component","Svg","Circle","G","Path","Text","Options","styleSvg","fontAdapt","_","Tree","require","children","x","collapsed","TreeChart","noDataMsg","props","noDataMessage","data","undefined","options","tree","width","chartWidth","height","chartHeight","colors","curves","map","c","i","connector","path","print","stroke","strokeOpacity","fillOpacityStyle","textStyle","label","r","nodes","n","index","text","item","length","fontFamily","fontSize","fontWeight","fontStyle","name","point","margin","left","top","defaultProps","right","bottom","fill","animate","type","duration","fillTransition","bold"],"mappings":"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","sourcesContent":["/*\nCopyright 2016 Capital One Services, LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and limitations under the License.\n\nSPDX-Copyright: Copyright (c) Capital One Services, LLC\nSPDX-License-Identifier: Apache-2.0\n*/\n\nimport React, {Component} from 'react'\nimport {Text as ReactText}  from 'react-native'\nimport Svg,{ Circle, G, Path, Text } from 'react-native-svg'\nimport { Options, styleSvg, fontAdapt } from './util'\nimport _ from 'lodash'\nconst Tree = require('paths-js/tree')\n\nfunction children(x) {\n  if(x.collapsed) {\n    return []\n  }\n  else {\n    return x.children || []\n  }\n}\n\nexport default class TreeChart extends Component {\n\n  static defaultProps = {\n    options: {\n      margin: {top: 20, left: 50, right: 80, bottom: 20},\n      width: 600,\n      height: 600,\n      fill: '#2980B9',\n      stroke: '#3E90F0',\n      r: 5,\n      animate: {\n        type: 'oneByOne',\n        duration: 200,\n        fillTransition: 3\n      },\n      label: {\n        fontFamily: 'Arial',\n        fontSize: 14,\n        bold: true,\n        fill: '#34495E'\n      }\n    }\n  }\n\n  render() {\n    const noDataMsg = this.props.noDataMessage || 'No data available'\n    if (this.props.data === undefined) return (<ReactText>{noDataMsg}</ReactText>)\n\n    const options = new Options(this.props)\n    const tree = Tree({\n      data: this.props.data,\n      children: children,\n      width: options.chartWidth,\n      height: options.chartHeight\n    })\n    const colors = styleSvg({},options)\n    const curves = _.map(tree.curves,function (c,i) {\n      return <Path key={'curves_' + i} d={ c.connector.path.print() } fill=\"none\" stroke={colors.stroke} strokeOpacity={colors.strokeOpacity} />\n    })\n\n    const fillOpacityStyle = 1\n    const textStyle = fontAdapt(options.label)\n    const r = options.r || 5\n    const nodes = _.map(tree.nodes,function (n,index) {\n\n      let text\n\n      if (children(n.item).length > 0) {\n        text = <Text fontFamily={textStyle.fontFamily}\n              fontSize={textStyle.fontSize}\n              fontWeight={textStyle.fontWeight}\n              fontStyle={textStyle.fontStyle}  x={-10} y={-10} textAnchor=\"end\">{ n.item.name }</Text>\n      } else {\n        text = <Text fontFamily={textStyle.fontFamily}\n              fontSize={textStyle.fontSize}\n              fontWeight={textStyle.fontWeight}\n              fontStyle={textStyle.fontStyle} x={10} y={-10} textAnchor=\"start\">{ n.item.name }</Text>\n      }\n\n      return (<G key={'tree_' + index} x={n.point[0]} y={n.point[1]}>\n                  <Circle fillOpacity={fillOpacityStyle} {...colors} r={r} cx=\"0\" cy=\"0\" />\n                  { text }\n              </G>)\n    })\n\n    return (\n            <Svg width={options.width} height={options.height}>\n                <G x={options.margin.left} y={options.margin.top}>\n                    { curves }\n                    { nodes }\n                </G>\n            </Svg>\n        )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}