{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/node_modules/react-native-svg/elements/TextPath.js\";\nvar _excluded = [\"children\", \"href\", \"startOffset\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport createReactNativeComponentClass from \"../lib/createReactNativeComponentClass\";\nimport { TextPathAttributes } from \"../lib/attributes\";\nimport extractText from \"../lib/extract/extractText\";\nimport Shape from \"./Shape\";\nimport { pathProps, fontProps, numberProp } from \"../lib/props\";\nimport extractProps from \"../lib/extract/extractProps\";\nimport TSpan from \"./TSpan\";\nvar idExpReg = /^#(.+)$/;\n\nvar _default = function (_Shape) {\n  _inherits(_default, _Shape);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          href = _this$props.href,\n          startOffset = _this$props.startOffset,\n          props = _objectWithoutProperties(_this$props, _excluded);\n\n      if (href) {\n        var matched = href.match(idExpReg);\n\n        if (matched) {\n          href = matched[1];\n          return React.createElement(RNSVGTextPath, _extends({\n            href: href\n          }, extractProps(_objectSpread(_objectSpread({}, props), {}, {\n            x: null,\n            y: null\n          }), this), extractText({\n            children: children,\n            startOffset: startOffset\n          }, true), {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 24\n            }\n          }));\n        }\n      }\n\n      console.warn('Invalid `href` prop for `TextPath` element, expected a href like `\"#id\"`, but got: \"' + props.href + '\"');\n      return React.createElement(TSpan, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 16\n        }\n      }, children);\n    }\n  }]);\n\n  return _default;\n}(Shape);\n\n_default.displayName = 'Span';\n_default.propTypes = _objectSpread(_objectSpread(_objectSpread({}, pathProps), fontProps), {}, {\n  href: PropTypes.string.isRequired,\n  startOffset: numberProp\n});\nexport { _default as default };\nvar RNSVGTextPath = createReactNativeComponentClass('RNSVGTextPath', function () {\n  return {\n    validAttributes: TextPathAttributes,\n    uiViewClassName: 'RNSVGTextPath'\n  };\n});","map":{"version":3,"sources":["/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/node_modules/react-native-svg/elements/TextPath.js"],"names":["React","PropTypes","createReactNativeComponentClass","TextPathAttributes","extractText","Shape","pathProps","fontProps","numberProp","extractProps","TSpan","idExpReg","props","children","href","startOffset","matched","match","x","y","console","warn","displayName","propTypes","string","isRequired","RNSVGTextPath","validAttributes","uiViewClassName"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,+BAAP;AACA,SAAQC,kBAAR;AACA,OAAOC,WAAP;AACA,OAAOC,KAAP;AACA,SAAQC,SAAR,EAAmBC,SAAnB,EAA8BC,UAA9B;AACA,OAAOC,YAAP;AACA,OAAOC,KAAP;AAEA,IAAMC,QAAQ,GAAG,SAAjB;;;;;;;;;;;;;;;WAYI,kBAAS;AACL,wBAA8C,KAAKC,KAAnD;AAAA,UAAKC,QAAL,eAAKA,QAAL;AAAA,UAAeC,IAAf,eAAeA,IAAf;AAAA,UAAqBC,WAArB,eAAqBA,WAArB;AAAA,UAAqCH,KAArC;;AACA,UAAIE,IAAJ,EAAU;AACN,YAAIE,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAWN,QAAX,CAAd;;AAEA,YAAIK,OAAJ,EAAa;AACTF,UAAAA,IAAI,GAAGE,OAAO,CAAC,CAAD,CAAd;AAEA,iBAAO,oBAAC,aAAD;AACH,YAAA,IAAI,EAAEF;AADH,aAECL,YAAY,iCACTG,KADS;AAEZM,YAAAA,CAAC,EAAE,IAFS;AAGZC,YAAAA,CAAC,EAAE;AAHS,cAIb,IAJa,CAFb,EAOCf,WAAW,CAAC;AACZS,YAAAA,QAAQ,EAARA,QADY;AAEZE,YAAAA,WAAW,EAAXA;AAFY,WAAD,EAGZ,IAHY,CAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AAYH;AACJ;;AAEDK,MAAAA,OAAO,CAACC,IAAR,CAAa,yFAAyFT,KAAK,CAACE,IAA/F,GAAsG,GAAnH;AACA,aAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,QAAR,CAAP;AACH;;;;EAnCwBR,K;;SAClBiB,W,GAAc,M;SAEdC,S,iDACAjB,S,GACAC,S;AACHO,EAAAA,IAAI,EAAEb,SAAS,CAACuB,MAAV,CAAiBC,U;AACvBV,EAAAA,WAAW,EAAEP;;;AAgCrB,IAAMkB,aAAa,GAAGxB,+BAA+B,CAAC,eAAD,EAAkB;AAAA,SAAO;AAC1EyB,IAAAA,eAAe,EAAExB,kBADyD;AAE1EyB,IAAAA,eAAe,EAAE;AAFyD,GAAP;AAAA,CAAlB,CAArD","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport createReactNativeComponentClass from '../lib/createReactNativeComponentClass';\nimport {TextPathAttributes} from '../lib/attributes';\nimport extractText from '../lib/extract/extractText';\nimport Shape from './Shape';\nimport {pathProps, fontProps, numberProp} from '../lib/props';\nimport extractProps from '../lib/extract/extractProps';\nimport TSpan from './TSpan';\n\nconst idExpReg = /^#(.+)$/;\n\nexport default class extends Shape {\n    static displayName = 'Span';\n\n    static propTypes = {\n        ...pathProps,\n        ...fontProps,\n        href: PropTypes.string.isRequired,\n        startOffset: numberProp\n    };\n\n    render() {\n        let {children, href, startOffset, ...props} = this.props;\n        if (href) {\n            let matched = href.match(idExpReg);\n\n            if (matched) {\n                href = matched[1];\n\n                return <RNSVGTextPath\n                    href={href}\n                    {...extractProps({\n                        ...props,\n                        x: null,\n                        y: null\n                    }, this)}\n                    {...extractText({\n                        children,\n                        startOffset\n                    }, true)}\n                />;\n            }\n        }\n\n        console.warn('Invalid `href` prop for `TextPath` element, expected a href like `\"#id\"`, but got: \"' + props.href + '\"');\n        return <TSpan>{children}</TSpan>\n    }\n\n}\n\nconst RNSVGTextPath = createReactNativeComponentClass('RNSVGTextPath', () => ({\n    validAttributes: TextPathAttributes,\n    uiViewClassName: 'RNSVGTextPath'\n}));\n"]},"metadata":{},"sourceType":"module"}