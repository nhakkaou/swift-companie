{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/node_modules/react-native-svg/elements/Polygon.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Path from \"./Path\";\nimport { pathProps } from \"../lib/props\";\nimport extractPolyPoints from \"../lib/extract/extractPolyPoints\";\n\nvar _default = function (_Component) {\n  _inherits(_default, _Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n\n    _this.setNativeProps = function () {\n      var _this$root$getNativeE;\n\n      (_this$root$getNativeE = _this.root.getNativeElement()).setNativeProps.apply(_this$root$getNativeE, arguments);\n    };\n\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var points = this.props.points;\n\n      if (Array.isArray(points)) {\n        points = points.join(',');\n      }\n\n      return React.createElement(Path, _extends({\n        ref: function ref(ele) {\n          _this2.root = ele;\n        }\n      }, this.props, {\n        d: \"M\" + extractPolyPoints(points) + \"z\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 16\n        }\n      }));\n    }\n  }]);\n\n  return _default;\n}(Component);\n\n_default.displayName = 'Polygon';\n_default.propTypes = _objectSpread(_objectSpread({}, pathProps), {}, {\n  points: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired\n});\n_default.defaultProps = {\n  points: ''\n};\nexport { _default as default };","map":{"version":3,"sources":["/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/node_modules/react-native-svg/elements/Polygon.js"],"names":["React","Component","PropTypes","Path","pathProps","extractPolyPoints","setNativeProps","root","getNativeElement","points","props","Array","isArray","join","ele","displayName","propTypes","oneOfType","string","array","isRequired","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP;AACA,SAAQC,SAAR;AACA,OAAOC,iBAAP;;;;;;;;;;;;;;;;;;UAaIC,c,GAAiB,YAAa;AAAA;;AAC1B,qCAAKC,IAAL,CAAUC,gBAAV,IAA6BF,cAA7B;AACH,K;;;;;;;WAED,kBAAS;AAAA;;AACL,UAAIG,MAAM,GAAG,KAAKC,KAAL,CAAWD,MAAxB;;AACA,UAAIE,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACvBA,QAAAA,MAAM,GAAGA,MAAM,CAACI,IAAP,CAAY,GAAZ,CAAT;AACH;;AAED,aAAO,oBAAC,IAAD;AACH,QAAA,GAAG,EAAE,aAAAC,GAAG,EAAI;AAAC,UAAA,MAAI,CAACP,IAAL,GAAYO,GAAZ;AAAiB;AAD3B,SAEC,KAAKJ,KAFN;AAGH,QAAA,CAAC,QAAML,iBAAiB,CAACI,MAAD,CAAvB,MAHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AAKH;;;;EA1BwBR,S;;SAClBc,W,GAAc,S;SACdC,S,mCACAZ,S;AACHK,EAAAA,MAAM,EAAEP,SAAS,CAACe,SAAV,CAAoB,CAACf,SAAS,CAACgB,MAAX,EAAmBhB,SAAS,CAACiB,KAA7B,CAApB,EAAyDC;;SAG9DC,Y,GAAe;AAClBZ,EAAAA,MAAM,EAAE;AADU,C","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Path from './Path';\nimport {pathProps} from '../lib/props';\nimport extractPolyPoints from '../lib/extract/extractPolyPoints';\n\nexport default class extends Component{\n    static displayName = 'Polygon';\n    static propTypes = {\n        ...pathProps,\n        points: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired\n    };\n\n    static defaultProps = {\n        points: ''\n    };\n\n    setNativeProps = (...args) => {\n        this.root.getNativeElement().setNativeProps(...args);\n    };\n\n    render() {\n        let points = this.props.points;\n        if (Array.isArray(points)) {\n            points = points.join(',');\n        }\n\n        return <Path\n            ref={ele => {this.root = ele;}}\n            {...this.props}\n            d={`M${extractPolyPoints(points)}z`}\n        />;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}