{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { Children } from 'react';\nimport _ from 'lodash';\nimport Color from 'color';\nimport extractOpacity from \"./extractOpacity\";\nimport extractTransform from \"./extractTransform\";\nimport PATTERN_UNITS from \"../PATTERN_UNITS\";\nimport percentToFloat from \"../percentToFloat\";\nimport Stop from \"../../elements/Stop\";\nexport default function (props) {\n  if (!props.id) {\n    return null;\n  }\n\n  var stops = {};\n  Children.forEach(props.children, function (child) {\n    if (child.type === Stop) {\n      if (child.props.stopColor && child.props.offset) {\n        var offset = percentToFloat(child.props.offset);\n        stops[offset] = Color(child.props.stopColor).alpha(extractOpacity(child.props.stopOpacity));\n      }\n    } else {\n      console.warn('`Gradient` elements only accept `Stop` elements as children');\n    }\n  });\n\n  var sorted = _.sortBy(_.map(stops, function (stop, offset) {\n    return {\n      stop: stop,\n      offset: offset\n    };\n  }), 'offset');\n\n  var gradient = [];\n  sorted.forEach(function (_ref) {\n    var stop = _ref.stop;\n    var channels = stop.rgbaArray();\n    gradient.push(channels[0] / 255);\n    gradient.push(channels[1] / 255);\n    gradient.push(channels[2] / 255);\n    gradient.push(channels[3]);\n  });\n  gradient.push.apply(gradient, _toConsumableArray(sorted.map(function (_ref2) {\n    var offset = _ref2.offset;\n    return +offset;\n  })));\n  var gradientTransform;\n\n  if (props.transform) {\n    gradientTransform = extractTransform(props.transform);\n  } else {\n    gradientTransform = extractTransform(props);\n  }\n\n  return {\n    gradient: gradient,\n    name: props.id,\n    gradientTransform: gradientTransform,\n    gradientUnits: PATTERN_UNITS[props.gradientUnits] || 0\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/node_modules/react-native-svg/lib/extract/extractGradient.js"],"names":["Children","_","Color","extractOpacity","extractTransform","PATTERN_UNITS","percentToFloat","Stop","props","id","stops","forEach","children","child","type","stopColor","offset","alpha","stopOpacity","console","warn","sorted","sortBy","map","stop","gradient","channels","rgbaArray","push","gradientTransform","transform","name","gradientUnits"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,cAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,aAAP;AACA,OAAOC,cAAP;AACA,OAAOC,IAAP;AAEA,eAAe,UAASC,KAAT,EAAgB;AAC3B,MAAI,CAACA,KAAK,CAACC,EAAX,EAAe;AACX,WAAO,IAAP;AACH;;AAED,MAAMC,KAAK,GAAG,EAAd;AACAV,EAAAA,QAAQ,CAACW,OAAT,CAAiBH,KAAK,CAACI,QAAvB,EAAiC,UAAAC,KAAK,EAAI;AACtC,QAAIA,KAAK,CAACC,IAAN,KAAeP,IAAnB,EAAyB;AACrB,UAAIM,KAAK,CAACL,KAAN,CAAYO,SAAZ,IAAyBF,KAAK,CAACL,KAAN,CAAYQ,MAAzC,EAAiD;AAE7C,YAAIA,MAAM,GAAGV,cAAc,CAACO,KAAK,CAACL,KAAN,CAAYQ,MAAb,CAA3B;AAGAN,QAAAA,KAAK,CAACM,MAAD,CAAL,GAAgBd,KAAK,CAACW,KAAK,CAACL,KAAN,CAAYO,SAAb,CAAL,CAA6BE,KAA7B,CAAmCd,cAAc,CAACU,KAAK,CAACL,KAAN,CAAYU,WAAb,CAAjD,CAAhB;AACH;AACJ,KARD,MAQO;AACHC,MAAAA,OAAO,CAACC,IAAR,CAAa,6DAAb;AACH;AACJ,GAZD;;AAcA,MAAMC,MAAM,GAAGpB,CAAC,CAACqB,MAAF,CAASrB,CAAC,CAACsB,GAAF,CAAMb,KAAN,EAAa,UAACc,IAAD,EAAOR,MAAP,EAAkB;AACnD,WAAO;AAACQ,MAAAA,IAAI,EAAJA,IAAD;AAAOR,MAAAA,MAAM,EAANA;AAAP,KAAP;AACH,GAFuB,CAAT,EAEX,QAFW,CAAf;;AAIA,MAAMS,QAAQ,GAAG,EAAjB;AAEAJ,EAAAA,MAAM,CAACV,OAAP,CAAe,gBAAY;AAAA,QAAVa,IAAU,QAAVA,IAAU;AACvB,QAAIE,QAAQ,GAAGF,IAAI,CAACG,SAAL,EAAf;AACAF,IAAAA,QAAQ,CAACG,IAAT,CAAcF,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA5B;AACAD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA5B;AACAD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA5B;AACAD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,QAAQ,CAAC,CAAD,CAAtB;AACH,GAND;AAQAD,EAAAA,QAAQ,CAACG,IAAT,OAAAH,QAAQ,qBAASJ,MAAM,CAACE,GAAP,CAAW;AAAA,QAAEP,MAAF,SAAEA,MAAF;AAAA,WAAc,CAACA,MAAf;AAAA,GAAX,CAAT,EAAR;AAGA,MAAIa,iBAAJ;;AACA,MAAIrB,KAAK,CAACsB,SAAV,EAAqB;AACjBD,IAAAA,iBAAiB,GAAGzB,gBAAgB,CAACI,KAAK,CAACsB,SAAP,CAApC;AACH,GAFD,MAEO;AACHD,IAAAA,iBAAiB,GAAGzB,gBAAgB,CAACI,KAAD,CAApC;AACH;;AAED,SAAO;AACHiB,IAAAA,QAAQ,EAARA,QADG;AAEHM,IAAAA,IAAI,EAAEvB,KAAK,CAACC,EAFT;AAGHoB,IAAAA,iBAAiB,EAAjBA,iBAHG;AAIHG,IAAAA,aAAa,EAAE3B,aAAa,CAACG,KAAK,CAACwB,aAAP,CAAb,IAAsC;AAJlD,GAAP;AAMH","sourcesContent":["import {Children} from 'react';\nimport _ from 'lodash';\nimport Color from 'color';\n\nimport extractOpacity from './extractOpacity';\nimport extractTransform from './extractTransform';\nimport PATTERN_UNITS from '../PATTERN_UNITS';\nimport percentToFloat from '../percentToFloat';\nimport Stop from '../../elements/Stop';\n\nexport default function(props) {\n    if (!props.id) {\n        return null;\n    }\n\n    const stops = {};\n    Children.forEach(props.children, child => {\n        if (child.type === Stop) {\n            if (child.props.stopColor && child.props.offset) {\n                // convert percent to float.\n                let offset = percentToFloat(child.props.offset);\n\n                // add stop\n                stops[offset] = Color(child.props.stopColor).alpha(extractOpacity(child.props.stopOpacity));\n            }\n        } else {\n            console.warn('`Gradient` elements only accept `Stop` elements as children');\n        }\n    });\n\n    const sorted = _.sortBy(_.map(stops, (stop, offset) => {\n        return {stop, offset};\n    }), 'offset');\n\n    const gradient = [];\n\n    sorted.forEach(({stop}) => {\n        let channels = stop.rgbaArray();\n        gradient.push(channels[0] / 255);\n        gradient.push(channels[1] / 255);\n        gradient.push(channels[2] / 255);\n        gradient.push(channels[3]);\n    });\n\n    gradient.push(...sorted.map(({offset}) => +offset));\n\n\n    let gradientTransform;\n    if (props.transform) {\n        gradientTransform = extractTransform(props.transform);\n    } else {\n        gradientTransform = extractTransform(props);\n    }\n\n    return {\n        gradient,\n        name: props.id,\n        gradientTransform,\n        gradientUnits: PATTERN_UNITS[props.gradientUnits] || 0\n    };\n}\n"]},"metadata":{},"sourceType":"module"}