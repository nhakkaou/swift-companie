{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/node_modules/react-native-svg/lib/extract/extractText.js\";\nimport _ from 'lodash';\nimport React, { Children } from 'react';\nimport TSpan from \"../../elements/TSpan\";\nvar fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?)[ptexm%]*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nvar fontFamilyPrefix = /^[\\s\"']*/;\nvar fontFamilySuffix = /[\\s\"']*$/;\nvar spaceReg = /\\s+/;\nvar commaReg = /,/g;\nvar anchors = {\n  auto: 0,\n  start: 1,\n  middle: 2,\n  end: 3\n};\nvar cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n  return fontFamilyString ? fontFamilyString.split(commaReg)[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '') : null;\n}\n\nfunction parseFontString(font) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n\n  var match = fontRegExp.exec(font);\n\n  if (!match) {\n    return null;\n  }\n\n  var fontFamily = extractSingleFontFamily(match[3]);\n  var fontSize = +match[2] || 12;\n  var isBold = /bold/.exec(match[1]);\n  var isItalic = /italic/.exec(match[1]);\n  cachedFontObjectsFromString[font] = {\n    fontFamily: fontFamily,\n    fontSize: fontSize,\n    fontWeight: isBold ? 'bold' : 'normal',\n    fontStyle: isItalic ? 'italic' : 'normal'\n  };\n  return cachedFontObjectsFromString[font];\n}\n\nfunction extractFont(props) {\n  var font = props.font;\n  var fontSize = +props.fontSize;\n  var ownedFont = {\n    fontFamily: extractSingleFontFamily(props.fontFamily),\n    fontSize: isNaN(fontSize) ? null : fontSize,\n    fontWeight: props.fontWeight,\n    fontStyle: props.fontStyle\n  };\n\n  if (typeof props.font === 'string') {\n    font = parseFontString(props.font);\n  }\n\n  ownedFont = _.pickBy(ownedFont, function (prop) {\n    return !_.isNil(prop);\n  });\n  return _.defaults(ownedFont, font);\n}\n\nfunction parseDelta(delta) {\n  if (typeof delta === 'string') {\n    if (isNaN(+delta)) {\n      return delta.trim().replace(commaReg, ' ').split(spaceReg).map(function (d) {\n        return +d || 0;\n      });\n    } else {\n      return [+delta];\n    }\n  } else if (typeof delta === 'number') {\n    return [delta];\n  } else {\n    return [];\n  }\n}\n\nexport default function (props, container) {\n  var _this = this;\n\n  var x = props.x,\n      y = props.y,\n      dx = props.dx,\n      dy = props.dy,\n      textAnchor = props.textAnchor,\n      startOffset = props.startOffset;\n  var deltaX = parseDelta(dx);\n  var deltaY = parseDelta(dy);\n  var children = props.children;\n  var content = null;\n\n  if (typeof children === 'string' || typeof children === 'number') {\n    var childrenString = children.toString();\n\n    if (container) {\n      children = React.createElement(TSpan, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 24\n        }\n      }, childrenString);\n    } else {\n      content = childrenString;\n      children = null;\n    }\n  } else if (Children.count(children) > 1 || Array.isArray(children)) {\n    children = Children.map(children, function (child) {\n      if (typeof child === 'string' || typeof child === 'number') {\n        return React.createElement(TSpan, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 24\n          }\n        }, child.toString());\n      } else {\n        return child;\n      }\n    });\n  }\n\n  return {\n    textAnchor: anchors[textAnchor] || 0,\n    font: extractFont(props),\n    children: children,\n    content: content,\n    deltaX: deltaX,\n    deltaY: deltaY,\n    startOffset: (startOffset || 0).toString(),\n    positionX: _.isNil(x) ? null : x.toString(),\n    positionY: _.isNil(y) ? null : y.toString()\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/node_modules/react-native-svg/lib/extract/extractText.js"],"names":["_","React","Children","TSpan","fontRegExp","fontFamilyPrefix","fontFamilySuffix","spaceReg","commaReg","anchors","auto","start","middle","end","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","fontFamily","fontSize","isBold","isItalic","fontWeight","fontStyle","extractFont","props","ownedFont","isNaN","pickBy","prop","isNil","defaults","parseDelta","delta","trim","map","d","container","x","y","dx","dy","textAnchor","startOffset","deltaX","deltaY","children","content","childrenString","toString","count","Array","isArray","child","positionX","positionY"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React, {Children} from 'react';\nimport TSpan from '../../elements/TSpan';\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?)[ptexm%]*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst spaceReg = /\\s+/;\nconst commaReg = /,/g;\n\nconst anchors = {\n    auto: 0,\n    start: 1,\n    middle: 2,\n    end: 3\n};\n\nlet cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n    // SVG on the web allows for multiple font-families to be specified.\n    // For compatibility, we extract the first font-family, hoping\n    // we'll get a match.\n    return fontFamilyString ? fontFamilyString.split(commaReg)[0]\n        .replace(fontFamilyPrefix, '')\n        .replace(fontFamilySuffix, '') : null;\n}\n\nfunction parseFontString(font) {\n    if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n        return cachedFontObjectsFromString[font];\n    }\n    let match = fontRegExp.exec(font);\n    if (!match) {\n        return null;\n    }\n    let fontFamily = extractSingleFontFamily(match[3]);\n    let fontSize = +match[2] || 12;\n    let isBold = /bold/.exec(match[1]);\n    let isItalic = /italic/.exec(match[1]);\n    cachedFontObjectsFromString[font] = {\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: isBold ? 'bold' : 'normal',\n        fontStyle: isItalic ? 'italic' : 'normal'\n    };\n    return cachedFontObjectsFromString[font];\n}\n\nfunction extractFont(props) {\n    let font = props.font;\n    let fontSize = +props.fontSize;\n\n    let ownedFont = {\n        fontFamily: extractSingleFontFamily(props.fontFamily),\n        fontSize: isNaN(fontSize) ? null : fontSize,\n        fontWeight: props.fontWeight,\n        fontStyle: props.fontStyle\n    };\n\n    if (typeof props.font === 'string') {\n        font = parseFontString(props.font);\n    }\n    ownedFont = _.pickBy(ownedFont, prop => !_.isNil(prop));\n\n    return _.defaults(ownedFont, font);\n}\n\nfunction parseDelta(delta) {\n    if (typeof delta === 'string') {\n        if (isNaN(+delta)) {\n            return delta.trim().replace(commaReg, ' ').split(spaceReg).map(d => +d || 0);\n        } else {\n            return [+delta];\n        }\n    } else if (typeof delta === 'number') {\n        return [delta];\n    } else {\n        return [];\n    }\n}\n\nexport default function(props, container) {\n    const {\n        x,\n        y,\n        dx,\n        dy,\n        textAnchor,\n        startOffset\n    } = props;\n\n\n    const deltaX = parseDelta(dx);\n    const deltaY = parseDelta(dy);\n    let { children } = props;\n    let content = null;\n\n\n    if (typeof children === 'string' || typeof children === 'number') {\n        const childrenString = children.toString();\n        if (container) {\n            children = <TSpan>{childrenString}</TSpan>;\n        } else {\n            content = childrenString;\n            children = null;\n        }\n    } else if (Children.count(children) > 1 || Array.isArray(children)) {\n        children = Children.map(children, child => {\n            if (typeof child === 'string' || typeof child === 'number') {\n                return <TSpan>{child.toString()}</TSpan>;\n            } else {\n                return child;\n            }\n        });\n    }\n\n    return {\n        textAnchor: anchors[textAnchor] || 0,\n        font: extractFont(props),\n        children,\n        content,\n        deltaX,\n        deltaY,\n        startOffset: (startOffset || 0).toString(),\n        positionX: _.isNil(x) ? null : x.toString(),\n        positionY: _.isNil(y) ? null : y.toString()\n    };\n}\n"]},"metadata":{},"sourceType":"module"}