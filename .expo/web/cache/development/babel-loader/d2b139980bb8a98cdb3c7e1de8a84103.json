{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/src/GridAxis.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { G, Path } from 'react-native-svg';\nimport _ from 'lodash';\nimport { AxisStruct } from \"./Axis\";\n\nvar GridAxis = function (_Component) {\n  _inherits(GridAxis, _Component);\n\n  var _super = _createSuper(GridAxis);\n\n  function GridAxis() {\n    _classCallCheck(this, GridAxis);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridAxis, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          chartArea = _this$props.chartArea,\n          options = _this$props.options,\n          scale = _this$props.scale;\n      var horizontal = options.orient === 'top' || options.orient === 'bottom';\n      var axis = new AxisStruct(scale, options, chartArea, horizontal).axis();\n\n      if (typeof options.gridColor !== 'string') {\n        options.gridColor = '#3E90F0';\n      }\n\n      if (typeof options.opacity !== 'number') {\n        options.opacity = 0.5;\n      }\n\n      var gridLines = options.showLines ? _.map(axis.lines, function (c, i) {\n        return React.createElement(Path, {\n          key: 'gridLines' + i,\n          d: c.print(),\n          strokeOpacity: options.opacity,\n          stroke: options.gridColor,\n          fill: \"none\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 16\n          }\n        });\n      }) : [];\n      var offset = {\n        x: chartArea.margin.left * -1,\n        y: chartArea.margin.top * -1\n      };\n      var returnV = React.createElement(G, {\n        x: offset.x,\n        y: offset.y,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }\n      }, gridLines);\n      return returnV;\n    }\n  }]);\n\n  return GridAxis;\n}(Component);\n\nexport { GridAxis as default };","map":{"version":3,"sources":["/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/src/GridAxis.js"],"names":["React","Component","G","Path","_","AxisStruct","GridAxis","props","chartArea","options","scale","horizontal","orient","axis","gridColor","opacity","gridLines","showLines","map","lines","c","i","print","offset","x","margin","left","y","top","returnV"],"mappings":";;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,CAAT,EAAYC,IAAZ,QAAwB,kBAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,UAAT;;IAEqBC,Q;;;;;;;;;;;;;WAEnB,kBAAS;AACP,wBAAsC,KAAKC,KAA3C;AAAA,UAAQC,SAAR,eAAQA,SAAR;AAAA,UAAmBC,OAAnB,eAAmBA,OAAnB;AAAA,UAA4BC,KAA5B,eAA4BA,KAA5B;AACA,UAAMC,UAAU,GAAGF,OAAO,CAACG,MAAR,KAAkB,KAAlB,IAA2BH,OAAO,CAACG,MAAR,KAAkB,QAAhE;AAEA,UAAMC,IAAI,GAAG,IAAIR,UAAJ,CAAeK,KAAf,EAAqBD,OAArB,EAA6BD,SAA7B,EAAuCG,UAAvC,EAAmDE,IAAnD,EAAb;;AAEA,UAAI,OAAOJ,OAAO,CAACK,SAAf,KAA6B,QAAjC,EAA2C;AACzCL,QAAAA,OAAO,CAACK,SAAR,GAAoB,SAApB;AACD;;AAED,UAAI,OAAOL,OAAO,CAACM,OAAf,KAA2B,QAA/B,EAAyC;AACvCN,QAAAA,OAAO,CAACM,OAAR,GAAkB,GAAlB;AACD;;AAED,UAAMC,SAAS,GAAGP,OAAO,CAACQ,SAAR,GAAoBb,CAAC,CAACc,GAAF,CAAML,IAAI,CAACM,KAAX,EAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACtE,eACS,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAE,cAAcA,CAAzB;AAA4B,UAAA,CAAC,EAAED,CAAC,CAACE,KAAF,EAA/B;AAA0C,UAAA,aAAa,EAAEb,OAAO,CAACM,OAAjE;AAA0E,UAAA,MAAM,EAAEN,OAAO,CAACK,SAA1F;AAAqG,UAAA,IAAI,EAAC,MAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADT;AAGD,OAJqC,CAApB,GAIb,EAJL;AAMA,UAAIS,MAAM,GAAG;AACXC,QAAAA,CAAC,EAAEhB,SAAS,CAACiB,MAAV,CAAiBC,IAAjB,GAAwB,CAAC,CADjB;AAEXC,QAAAA,CAAC,EAAEnB,SAAS,CAACiB,MAAV,CAAiBG,GAAjB,GAAuB,CAAC;AAFhB,OAAb;AAKA,UAAIC,OAAO,GAAG,oBAAC,CAAD;AAAG,QAAA,CAAC,EAAEN,MAAM,CAACC,CAAb;AAAgB,QAAA,CAAC,EAAED,MAAM,CAACI,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACXX,SADW,CAAd;AAIA,aAAOa,OAAP;AAED;;;;EAjCmC5B,S;;SAAjBK,Q","sourcesContent":["/*\nCopyright 2016 Capital One Services, LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and limitations under the License.\n\nSPDX-Copyright: Copyright (c) Capital One Services, LLC\nSPDX-License-Identifier: Apache-2.0\n*/\n\nimport React, { Component } from 'react'\nimport { G, Path } from 'react-native-svg'\nimport _ from 'lodash'\nimport { AxisStruct } from './Axis'\n\nexport default class GridAxis extends Component {\n\n  render() {\n    const { chartArea, options, scale } = this.props\n    const horizontal = options.orient ==='top' || options.orient ==='bottom'\n\n    const axis = new AxisStruct(scale,options,chartArea,horizontal).axis()\n\n    if (typeof options.gridColor !== 'string') {\n      options.gridColor = '#3E90F0'\n    }\n\n    if (typeof options.opacity !== 'number') {\n      options.opacity = 0.5\n    }\n\n    const gridLines = options.showLines ? _.map(axis.lines, function (c, i) {\n      return (\n               <Path key={'gridLines' + i} d={c.print()} strokeOpacity={options.opacity} stroke={options.gridColor} fill=\"none\"/>\n            )\n    }) : []\n\n    let offset = {\n      x: chartArea.margin.left * -1,\n      y: chartArea.margin.top * -1\n    };\n\n    let returnV = <G x={offset.x} y={offset.y}>\n      {gridLines}\n    </G>;\n\n    return returnV\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}