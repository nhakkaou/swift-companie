{"ast":null,"code":"import extractBrush from \"./extractBrush\";\nimport extractOpacity from \"./extractOpacity\";\nimport { strokeProps } from \"../props\";\nvar separator = /\\s*,\\s*/;\nvar caps = {\n  butt: 0,\n  square: 2,\n  round: 1\n};\nvar joins = {\n  miter: 0,\n  bevel: 2,\n  round: 1\n};\nvar strokeKeys = Object.keys(strokeProps);\nexport default function (props, styleProperties) {\n  strokeKeys.forEach(function (name) {\n    if (props.hasOwnProperty(name)) {\n      styleProperties.push(name);\n    }\n  });\n  var stroke = props.stroke;\n  var strokeWidth = +props.strokeWidth;\n  var strokeDasharray = props.strokeDasharray;\n\n  if (typeof strokeDasharray === 'string') {\n    strokeDasharray = strokeDasharray.split(separator).map(function (dash) {\n      return +dash;\n    });\n  }\n\n  if (strokeDasharray && strokeDasharray.length === 1) {\n    strokeDasharray.push(strokeDasharray[0]);\n  }\n\n  return {\n    stroke: extractBrush(stroke),\n    strokeOpacity: extractOpacity(props.strokeOpacity),\n    strokeLinecap: caps[props.strokeLinecap] || 0,\n    strokeLinejoin: joins[props.strokeLinejoin] || 0,\n    strokeDasharray: strokeDasharray || null,\n    strokeWidth: strokeWidth || null,\n    strokeDashoffset: strokeDasharray ? +props.strokeDashoffset || 0 : null,\n    strokeMiterlimit: props.strokeMiterlimit || 4\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/noure/OneDrive/Bureau/swift-companion/node_modules/react-native-pathjs-charts/node_modules/react-native-svg/lib/extract/extractStroke.js"],"names":["extractBrush","extractOpacity","strokeProps","separator","caps","butt","square","round","joins","miter","bevel","strokeKeys","Object","keys","props","styleProperties","forEach","name","hasOwnProperty","push","stroke","strokeWidth","strokeDasharray","split","map","dash","length","strokeOpacity","strokeLinecap","strokeLinejoin","strokeDashoffset","strokeMiterlimit"],"mappings":"AAAA,OAAOA,YAAP;AACA,OAAOC,cAAP;AACA,SAAQC,WAAR;AAEA,IAAMC,SAAS,GAAG,SAAlB;AAEA,IAAMC,IAAI,GAAG;AACTC,EAAAA,IAAI,EAAE,CADG;AAETC,EAAAA,MAAM,EAAE,CAFC;AAGTC,EAAAA,KAAK,EAAE;AAHE,CAAb;AAMA,IAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,CADG;AAEVC,EAAAA,KAAK,EAAE,CAFG;AAGVH,EAAAA,KAAK,EAAE;AAHG,CAAd;AAMA,IAAMI,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYX,WAAZ,CAAnB;AAEA,eAAe,UAASY,KAAT,EAAgBC,eAAhB,EAAiC;AAC5CJ,EAAAA,UAAU,CAACK,OAAX,CAAmB,UAACC,IAAD,EAAU;AACzB,QAAIH,KAAK,CAACI,cAAN,CAAqBD,IAArB,CAAJ,EAAgC;AAC5BF,MAAAA,eAAe,CAACI,IAAhB,CAAqBF,IAArB;AACH;AACJ,GAJD;AAMA,MAAOG,MAAP,GAAiBN,KAAjB,CAAOM,MAAP;AACA,MAAMC,WAAW,GAAG,CAACP,KAAK,CAACO,WAA3B;AACA,MAAIC,eAAe,GAAGR,KAAK,CAACQ,eAA5B;;AAEA,MAAI,OAAOA,eAAP,KAA2B,QAA/B,EAAyC;AACrCA,IAAAA,eAAe,GAAGA,eAAe,CAACC,KAAhB,CAAsBpB,SAAtB,EAAiCqB,GAAjC,CAAqC,UAAAC,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAzC,CAAlB;AACH;;AAGD,MAAIH,eAAe,IAAIA,eAAe,CAACI,MAAhB,KAA2B,CAAlD,EAAqD;AACjDJ,IAAAA,eAAe,CAACH,IAAhB,CAAqBG,eAAe,CAAC,CAAD,CAApC;AACH;;AAED,SAAO;AACHF,IAAAA,MAAM,EAAEpB,YAAY,CAACoB,MAAD,CADjB;AAEHO,IAAAA,aAAa,EAAE1B,cAAc,CAACa,KAAK,CAACa,aAAP,CAF1B;AAGHC,IAAAA,aAAa,EAAExB,IAAI,CAACU,KAAK,CAACc,aAAP,CAAJ,IAA6B,CAHzC;AAIHC,IAAAA,cAAc,EAAErB,KAAK,CAACM,KAAK,CAACe,cAAP,CAAL,IAA+B,CAJ5C;AAKHP,IAAAA,eAAe,EAAEA,eAAe,IAAI,IALjC;AAMHD,IAAAA,WAAW,EAAEA,WAAW,IAAI,IANzB;AAOHS,IAAAA,gBAAgB,EAAER,eAAe,GAAI,CAACR,KAAK,CAACgB,gBAAP,IAA2B,CAA/B,GAAoC,IAPlE;AAQHC,IAAAA,gBAAgB,EAAEjB,KAAK,CAACiB,gBAAN,IAA0B;AARzC,GAAP;AAUH","sourcesContent":["import extractBrush from './extractBrush';\nimport extractOpacity from './extractOpacity';\nimport {strokeProps} from '../props'\n\nconst separator = /\\s*,\\s*/;\n\nconst caps = {\n    butt: 0,\n    square: 2,\n    round: 1\n};\n\nconst joins = {\n    miter: 0,\n    bevel: 2,\n    round: 1\n};\n\nconst strokeKeys = Object.keys(strokeProps);\n\nexport default function(props, styleProperties) {\n    strokeKeys.forEach((name) => {\n        if (props.hasOwnProperty(name)) {\n            styleProperties.push(name);\n        }\n    });\n\n    const {stroke} = props;\n    const strokeWidth = +props.strokeWidth;\n    let strokeDasharray = props.strokeDasharray;\n\n    if (typeof strokeDasharray === 'string') {\n        strokeDasharray = strokeDasharray.split(separator).map(dash => +dash);\n    }\n\n    // strokeDasharray length must be more than 1.\n    if (strokeDasharray && strokeDasharray.length === 1) {\n        strokeDasharray.push(strokeDasharray[0]);\n    }\n\n    return {\n        stroke: extractBrush(stroke),\n        strokeOpacity: extractOpacity(props.strokeOpacity),\n        strokeLinecap: caps[props.strokeLinecap] || 0,\n        strokeLinejoin: joins[props.strokeLinejoin] || 0,\n        strokeDasharray: strokeDasharray || null,\n        strokeWidth: strokeWidth || null,\n        strokeDashoffset: strokeDasharray ? (+props.strokeDashoffset || 0) : null,\n        strokeMiterlimit: props.strokeMiterlimit || 4\n    };\n}\n"]},"metadata":{},"sourceType":"module"}